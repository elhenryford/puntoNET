@page "/atleta/delete"
@using Microsoft.EntityFrameworkCore
@using ProyectoPuntoNET.Model
@inject IDbContextFactory<ProyectoPuntoNET.Data.ProyectoPuntoNETContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Atleta</h2>
    <hr />
    @if (atleta is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">nombre</dt>
            <dd class="col-sm-10">@atleta.nombre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">edad</dt>
            <dd class="col-sm-10">@atleta.edad</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">discapacidades</dt>
            <dd class="col-sm-10">@atleta.discapacidades</dd>
        </dl>
        <EditForm method="post" Model="atleta" OnValidSubmit="DeleteAtleta" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(atleta is null)">Delete</button> |
            <a href="/atleta">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Atleta? atleta;

    [SupplyParameterFromQuery]
    private int idAtleta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        atleta = await context.Atleta.FirstOrDefaultAsync(m => m.idAtleta == idAtleta);

        if (atleta is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAtleta()
    {
        using var context = DbFactory.CreateDbContext();
        context.Atleta.Remove(atleta!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/atleta");
    }
}
