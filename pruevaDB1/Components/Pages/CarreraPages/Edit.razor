@page "/carreras/edit"
@using Microsoft.EntityFrameworkCore
@using pruevaDB1.Components.Model
@inject IDbContextFactory<pruevaDB1.Data.pruevaDB1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Carrera</h2>
<hr />
@if (Carrera is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Carrera" OnValidSubmit="UpdateCarrera" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Carrera.IdCarrera" value="@Carrera.IdCarrera" />
                <div class="mb-3">
                    <label for="nombre" class="form-label">nombre:</label>
                    <InputText id="nombre" @bind-Value="Carrera.Nombre" class="form-control" />
                    <ValidationMessage For="() => Carrera.Nombre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fecha" class="form-label">fecha:</label>
                    <InputDate id="fecha" @bind-Value="Carrera.Fecha" class="form-control" />
                    <ValidationMessage For="() => Carrera.Fecha" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cantidadpuntoscontrol" class="form-label">cantidadPuntosControl:</label>
                    <InputNumber id="cantidadpuntoscontrol" @bind-Value="Carrera.CantidadPuntosControl" class="form-control" />
                    <ValidationMessage For="() => Carrera.CantidadPuntosControl" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="cuposdisponibles" class="form-label">cuposDisponibles:</label>
                    <InputNumber id="cuposdisponibles" @bind-Value="Carrera.CuposDisponibles" class="form-control" />
                    <ValidationMessage For="() => Carrera.CuposDisponibles" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="mapa" class="form-label">mapa:</label>
                    <InputText id="mapa" @bind-Value="Carrera.Mapa" class="form-control" />
                    <ValidationMessage For="() => Carrera.Mapa" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/carreras">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int idCarrera { get; set; }

    [SupplyParameterFromForm]
    private Carrera? Carrera { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Carrera ??= await context.Carrera.FirstOrDefaultAsync(m => m.IdCarrera == idCarrera);

        if (Carrera is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCarrera()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Carrera!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CarreraExists(Carrera!.IdCarrera))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/carreras");
    }

    private bool CarreraExists(int idcarrera)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Carrera.Any(e => e.IdCarrera == idcarrera);
    }
}
