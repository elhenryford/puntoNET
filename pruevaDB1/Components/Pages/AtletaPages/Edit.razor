@page "/atleta/edit"
@using Microsoft.EntityFrameworkCore
@using pruevaDB1.Components.Model
@using pruevaDB1.Components.Model
@inject IDbContextFactory<pruevaDB1.Data.pruevaDB1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Atleta</h2>
<hr />
@if (Atleta is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Atleta" OnValidSubmit="UpdateAtleta" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Atleta.IdAtleta" value="@Atleta.IdAtleta" />
                <div class="mb-3">
                    <label for="nombre" class="form-label">nombre:</label>
                    <InputText id="nombre" @bind-Value="Atleta.Nombre" class="form-control" />
                    <ValidationMessage For="() => Atleta.Nombre" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="edad" class="form-label">edad:</label>
                    <InputNumber id="edad" @bind-Value="Atleta.Edad" class="form-control" />
                    <ValidationMessage For="() => Atleta.Edad" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="discapacidades" class="form-label">discapacidades:</label>
                    <InputText id="discapacidades" @bind-Value="Atleta.Discapacidades" class="form-control" />
                    <ValidationMessage For="() => Atleta.Discapacidades" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/atleta">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int idAtleta { get; set; }

    [SupplyParameterFromForm]
    private Atleta? Atleta { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Atleta ??= await context.Atleta.FirstOrDefaultAsync(m => m.IdAtleta == idAtleta);

        if (Atleta is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateAtleta()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Atleta!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!AtletaExists(Atleta!.IdAtleta))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/atleta");
    }

    private bool AtletaExists(int idatleta)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Atleta.Any(e => e.IdAtleta == idatleta);
    }
}
