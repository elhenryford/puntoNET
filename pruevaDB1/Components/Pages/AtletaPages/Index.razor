@page "/atleta"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using pruevaDB1.Components.Model
@using pruevaDB1.Data
@implements IAsyncDisposable
@inject IDbContextFactory<pruevaDB1.Data.pruevaDB1Context> DbFactory

<PageTitle>Index</PageTitle>

<h1>Index</h1>

<p>
    <a href="atleta/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Atleta">
    <PropertyColumn Property="atleta => atleta.Nombre" />
    <PropertyColumn Property="atleta => atleta.Edad" />
    <PropertyColumn Property="atleta => atleta.Discapacidades" />

    <TemplateColumn Context="atleta">
        <a href="@($"atleta/edit?idatleta={atleta.IdAtleta}")">Edit</a> |
        <a href="@($"atleta/details?idatleta={atleta.IdAtleta}")">Details</a> |
        <a href="@($"atleta/delete?idatleta={atleta.IdAtleta}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private pruevaDB1Context context = default!;
    private List<Atleta> atletas = new();

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        atletas = await context.Atleta
            .AsNoTracking()   // 🔥 esto evita que EF cree proxies con referencias
            .ToListAsync();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
